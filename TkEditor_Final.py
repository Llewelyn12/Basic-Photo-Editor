# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design02.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog,QFileDialog,QDialog, QVBoxLayout, QSlider, QLabel
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import Qt
import cv2
import random
import numpy as np
from matplotlib import pyplot as plt
import pyqtgraph as pg



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setMinimumSize(QtCore.QSize(1366, 768))
        MainWindow.setMaximumSize(QtCore.QSize(1366, 768))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/pantone_610090.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.showimage = QtWidgets.QLabel(self.centralwidget)
        label_width = 1300
        label_height = 760
        x_position = (1366-label_width)//2
        y_position = (768-label_height)//2
        self.showimage.setGeometry(QtCore.QRect(x_position,y_position,label_width,label_height))
        self.showimage.setText("")
        self.showimage.setObjectName("showimage")
        self.showimage.setAlignment(Qt.AlignCenter)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon/folder.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menufile.setIcon(icon1)
        self.menufile.setObjectName("menufile")
        self.menuedit = QtWidgets.QMenu(self.menubar)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icon/image-editing.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuedit.setIcon(icon2)
        self.menuedit.setObjectName("menuedit")
        self.menuPixel_Transformation = QtWidgets.QMenu(self.menubar)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icon/size.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuPixel_Transformation.setIcon(icon3)
        self.menuPixel_Transformation.setObjectName("menuPixel_Transformation")
        self.menufiltering = QtWidgets.QMenu(self.menubar)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icon/setting.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menufiltering.setIcon(icon4)
        self.menufiltering.setObjectName("menufiltering")
        self.menuImage_Arithmetic = QtWidgets.QMenu(self.menubar)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icon/abacus.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuImage_Arithmetic.setIcon(icon5)
        self.menuImage_Arithmetic.setObjectName("menuImage_Arithmetic")
        self.menuColor_Manipulation = QtWidgets.QMenu(self.menubar)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icon/color-circle.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuColor_Manipulation.setIcon(icon6)
        self.menuColor_Manipulation.setObjectName("menuColor_Manipulation")
        self.menuselecting = QtWidgets.QMenu(self.menubar)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icon/select.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuselecting.setIcon(icon7)
        self.menuselecting.setObjectName("menuselecting")
        self.menuinformation = QtWidgets.QMenu(self.menubar)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("icon/information.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuinformation.setIcon(icon8)
        self.menuinformation.setObjectName("menuinformation")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionopen = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("icon/open-folder.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionopen.setIcon(icon9)
        self.actionopen.setObjectName("actionopen")
        self.actionsave = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("icon/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionsave.setIcon(icon10)
        self.actionsave.setObjectName("actionsave")
        self.actionexit = QtWidgets.QAction(MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("icon/logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionexit.setIcon(icon11)
        self.actionexit.setObjectName("actionexit")
        self.actionEnlarge_Shrink = QtWidgets.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("icon/enlarge.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEnlarge_Shrink.setIcon(icon12)
        self.actionEnlarge_Shrink.setObjectName("actionEnlarge_Shrink")
        self.actionflip = QtWidgets.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("icon/flip.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionflip.setIcon(icon13)
        self.actionflip.setObjectName("actionflip")
        self.actionRotate = QtWidgets.QAction(MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("icon/rotate-right.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRotate.setIcon(icon14)
        self.actionRotate.setObjectName("actionRotate")
        self.actionCrop = QtWidgets.QAction(MainWindow)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("icon/crop.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCrop.setIcon(icon15)
        self.actionCrop.setObjectName("actionCrop")
        self.actiongray_scale = QtWidgets.QAction(MainWindow)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("icon/greyscale.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actiongray_scale.setIcon(icon16)
        self.actiongray_scale.setObjectName("actiongray_scale")
        self.actionbrightness_and_contrast = QtWidgets.QAction(MainWindow)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap("icon/brightness.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionbrightness_and_contrast.setIcon(icon17)
        self.actionbrightness_and_contrast.setObjectName("actionbrightness_and_contrast")
        self.actioncontrast = QtWidgets.QAction(MainWindow)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap("icon/brightness-and-contrast-adjustment.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actioncontrast.setIcon(icon18)
        self.actioncontrast.setObjectName("actioncontrast")
        self.actioninvert = QtWidgets.QAction(MainWindow)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap("icon/invert-colors.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actioninvert.setIcon(icon19)
        self.actioninvert.setObjectName("actioninvert")
        self.actionhistogram = QtWidgets.QAction(MainWindow)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap("icon/color-correction.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionhistogram.setIcon(icon20)
        self.actionhistogram.setObjectName("actionhistogram")
        self.actionsalt_and_pepper = QtWidgets.QAction(MainWindow)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap("icon/salt-and-pepper.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionsalt_and_pepper.setIcon(icon21)
        self.actionsalt_and_pepper.setObjectName("actionsalt_and_pepper")
        self.actionGaussian = QtWidgets.QAction(MainWindow)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap("icon/bell-curve.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionGaussian.setIcon(icon22)
        self.actionGaussian.setObjectName("actionGaussian")
        self.actionblur = QtWidgets.QAction(MainWindow)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap("icon/blur.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionblur.setIcon(icon23)
        self.actionblur.setObjectName("actionblur")
        self.actionsharpen = QtWidgets.QAction(MainWindow)
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap("icon/sharpen.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionsharpen.setIcon(icon24)
        self.actionsharpen.setObjectName("actionsharpen")
        self.actionedge_detection = QtWidgets.QAction(MainWindow)
        icon25 = QtGui.QIcon()
        icon25.addPixmap(QtGui.QPixmap("icon/3d.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionedge_detection.setIcon(icon25)
        self.actionedge_detection.setObjectName("actionedge_detection")
        self.actionAdd_Subtract = QtWidgets.QAction(MainWindow)
        icon26 = QtGui.QIcon()
        icon26.addPixmap(QtGui.QPixmap("icon/plus-minus.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd_Subtract.setIcon(icon26)
        self.actionAdd_Subtract.setObjectName("actionAdd_Subtract")
        self.actionBlend = QtWidgets.QAction(MainWindow)
        icon27 = QtGui.QIcon()
        icon27.addPixmap(QtGui.QPixmap("icon/motion.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionBlend.setIcon(icon27)
        self.actionBlend.setObjectName("actionBlend")
        self.actionwhite_balnce = QtWidgets.QAction(MainWindow)
        icon28 = QtGui.QIcon()
        icon28.addPixmap(QtGui.QPixmap("icon/black-and-white.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionwhite_balnce.setIcon(icon28)
        self.actionwhite_balnce.setObjectName("actionwhite_balnce")
        self.actionAdjust_image_colors = QtWidgets.QAction(MainWindow)
        icon29 = QtGui.QIcon()
        icon29.addPixmap(QtGui.QPixmap("icon/contrast.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdjust_image_colors.setIcon(icon29)
        self.actionAdjust_image_colors.setObjectName("actionAdjust_image_colors")
        self.actionwidth_and_height = QtWidgets.QAction(MainWindow)
        icon30 = QtGui.QIcon()
        icon30.addPixmap(QtGui.QPixmap("icon/shape.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionwidth_and_height.setIcon(icon30)
        self.actionwidth_and_height.setObjectName("actionwidth_and_height")
        self.actionhistogram_2 = QtWidgets.QAction(MainWindow)
        icon31 = QtGui.QIcon()
        icon31.addPixmap(QtGui.QPixmap("icon/histogram.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionhistogram_2.setIcon(icon31)
        self.actionhistogram_2.setObjectName("actionhistogram_2")
        self.actionSelect_a_rectangular = QtWidgets.QAction(MainWindow)
        self.actionSelect_a_rectangular.setIcon(icon30)
        self.actionSelect_a_rectangular.setObjectName("actionSelect_a_rectangular")
        self.actionRotateCCW = QtWidgets.QAction(MainWindow)
        icon32 = QtGui.QIcon()
        icon32.addPixmap(QtGui.QPixmap("icon/rotate-left.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRotateCCW.setIcon(icon32)
        self.actionRotateCCW.setObjectName("actionRotateCCW")
        self.actionShrink = QtWidgets.QAction(MainWindow)
        icon33 = QtGui.QIcon()
        icon33.addPixmap(QtGui.QPixmap("icon/minimize.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShrink.setIcon(icon33)
        self.actionShrink.setObjectName("actionShrink")
        self.actionblurmedian = QtWidgets.QAction(MainWindow)
        icon34 = QtGui.QIcon()
        icon34.addPixmap(QtGui.QPixmap("icon/focus"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionblurmedian.setIcon(icon34)
        self.actionblurmedian.setObjectName("actionblurmedian") 
        # -------------------------
        self.actionblurguassian = QtWidgets.QAction(MainWindow)
        icon35 = QtGui.QIcon()
        icon35.addPixmap(QtGui.QPixmap("icon/bell-curve2"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionblurguassian.setIcon(icon35)
        self.actionblurguassian.setObjectName("actionblurguassian") 

        # -------------------------
        self.menufile.addAction(self.actionopen)
        self.menufile.addAction(self.actionsave)
        self.menufile.addAction(self.actionexit)
        self.menuedit.addAction(self.actionShrink)
        self.menuedit.addAction(self.actionEnlarge_Shrink)
        self.menuedit.addAction(self.actionflip)
        self.menuedit.addAction(self.actionRotate)
        self.menuedit.addAction(self.actionRotateCCW)
        self.menuedit.addAction(self.actionCrop)
        self.menuPixel_Transformation.addAction(self.actiongray_scale)
        self.menuPixel_Transformation.addAction(self.actionbrightness_and_contrast)
        self.menuPixel_Transformation.addAction(self.actioncontrast)
        self.menuPixel_Transformation.addAction(self.actioninvert)
        self.menuPixel_Transformation.addAction(self.actionhistogram)
        self.menuPixel_Transformation.addAction(self.actionsalt_and_pepper)
        self.menuPixel_Transformation.addAction(self.actionGaussian)
        self.menufiltering.addAction(self.actionblur)
        self.menufiltering.addAction(self.actionblurmedian) 
        self.menufiltering.addAction(self.actionblurguassian)
        self.menufiltering.addAction(self.actionsharpen)
        self.menufiltering.addAction(self.actionedge_detection)
        self.menuImage_Arithmetic.addAction(self.actionAdd_Subtract)
        self.menuImage_Arithmetic.addAction(self.actionBlend)
        self.menuColor_Manipulation.addAction(self.actionwhite_balnce)
        self.menuColor_Manipulation.addAction(self.actionAdjust_image_colors)
        self.menuselecting.addAction(self.actionSelect_a_rectangular)
        self.menuinformation.addAction(self.actionwidth_and_height)
        self.menuinformation.addAction(self.actionhistogram_2)
        self.menubar.addAction(self.menufile.menuAction())
        self.menubar.addAction(self.menuedit.menuAction())
        self.menubar.addAction(self.menuPixel_Transformation.menuAction())
        self.menubar.addAction(self.menufiltering.menuAction())
        self.menubar.addAction(self.menuImage_Arithmetic.menuAction())
        self.menubar.addAction(self.menuColor_Manipulation.menuAction())
        self.menubar.addAction(self.menuselecting.menuAction())
        self.menubar.addAction(self.menuinformation.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "TKEditor"))
        self.menufile.setTitle(_translate("MainWindow", "file"))
        self.menuedit.setTitle(_translate("MainWindow", "edit"))
        self.menuPixel_Transformation.setTitle(_translate("MainWindow", "Pixel Transformation"))
        self.menufiltering.setTitle(_translate("MainWindow", "filtering"))
        self.menuImage_Arithmetic.setTitle(_translate("MainWindow", "Image Arithmetic"))
        self.menuColor_Manipulation.setTitle(_translate("MainWindow", "Color Manipulation"))
        self.menuselecting.setTitle(_translate("MainWindow", "selecting"))
        self.menuinformation.setTitle(_translate("MainWindow", "information"))
        self.actionopen.setText(_translate("MainWindow", "open"))
        self.actionsave.setText(_translate("MainWindow", "save"))
        self.actionexit.setText(_translate("MainWindow", "exit"))
        self.actionEnlarge_Shrink.setText(_translate("MainWindow", "Enlarge"))
        self.actionflip.setText(_translate("MainWindow", "Flip"))
        self.actionRotate.setText(_translate("MainWindow", "RotateCW"))
        self.actionCrop.setText(_translate("MainWindow", "Crop"))
        self.actiongray_scale.setText(_translate("MainWindow", "gray-scale"))
        self.actionbrightness_and_contrast.setText(_translate("MainWindow", "brightness"))
        self.actioncontrast.setText(_translate("MainWindow", "contrast"))
        self.actioninvert.setText(_translate("MainWindow", "invert"))
        self.actionhistogram.setText(_translate("MainWindow", "histogram"))
        self.actionsalt_and_pepper.setText(_translate("MainWindow", "salt and pepper"))
        self.actionGaussian.setText(_translate("MainWindow", "Gaussian"))
        self.actionblur.setText(_translate("MainWindow", "blur"))
        self.actionblurmedian.setText(_translate("MainWindow", "blurmedian"))
        self.actionblurguassian.setText(_translate("MainWindow", "blurguassian"))
        self.actionsharpen.setText(_translate("MainWindow", "sharpen"))
        self.actionedge_detection.setText(_translate("MainWindow", "edge detection"))
        self.actionAdd_Subtract.setText(_translate("MainWindow", "Add/Subtract"))
        self.actionBlend.setText(_translate("MainWindow", "Blend"))
        self.actionwhite_balnce.setText(_translate("MainWindow", "white-balnce"))
        self.actionAdjust_image_colors.setText(_translate("MainWindow", "Adjust image colors"))
        self.actionwidth_and_height.setText(_translate("MainWindow", "width and height"))
        self.actionhistogram_2.setText(_translate("MainWindow", "histogram"))
        self.actionSelect_a_rectangular.setText(_translate("MainWindow", "Select a rectangular"))
        self.actionRotateCCW.setText(_translate("MainWindow", "RotateCCW"))
        self.actionShrink.setText(_translate("MainWindow", "Shrink"))
        
        self.actionopen.triggered.connect(self.openFile)
        self.actionsave.triggered.connect(self.saveImg)
        self.actiongray_scale.triggered.connect(self.imgToGray)
        self.actionRotate.triggered.connect(self.imgToRotateCW)
        self.actionRotateCCW.triggered.connect(self.imgToRotateCCW)
        self.actionflip.triggered.connect(self.imgToFlip)
        self.actioninvert.triggered.connect(self.imgToInvert)
        self.actionblur.triggered.connect(self.imgToBlur)    
        self.actionblurmedian.triggered.connect(self.imgToBlurmedian) 
        self.actionblurguassian.triggered.connect(self.imgToBlurguassian)
        self.actionGaussian.triggered.connect(self.imgToGaussian)
        self.actionsalt_and_pepper.triggered.connect(self.imgToSaltAndPepper)
        self.actionBlend.triggered.connect(self.imgToBlending)
        self.actionEnlarge_Shrink.triggered.connect(self.imgToEnlarge)
        self.actionShrink.triggered.connect(self.imgToShrink)
        self.actionsharpen.triggered.connect(self.imgToSharpen)
        self.actionbrightness_and_contrast.triggered.connect(self.showBrightnessDialog)
        self.actioncontrast.triggered.connect(self.showContrastDialog)
        
        self.actionwidth_and_height.triggered.connect(self.ShowInfoDialog)
        self.actionhistogram_2.triggered.connect(self.ShowHistogramDialog)
        self.actionedge_detection.triggered.connect(self.imgToEdgeDetection)
        self.actionwhite_balnce.triggered.connect(self.imgToWhite)
        self.actionAdjust_image_colors.triggered.connect(self.imgToAdjust)
        self.actionCrop.triggered.connect(self.imgToCrop)
        self.actionSelect_a_rectangular.triggered.connect(self.imgToRectangular)
        

    def showBrightnessDialog(self):
        if self.last_opened_image is not None:
            self.brightness_dialog = BrightnessDialog(MainWindow, self.last_opened_image, self)
            self.brightness_dialog.exec_()


    def showContrastDialog(self):
        if self.last_opened_image is not None:
            self.contrast_dialog = ContrastDialog(MainWindow, self.last_opened_image, self)
            self.contrast_dialog.exec_()


    def ShowInfoDialog(self):
        if self.last_opened_image is not None:
            self.showinfo_dialog = ShowInfoDialog(MainWindow, self.last_opened_image,self)
            self.showinfo_dialog.exec_()

    
    def ShowHistogramDialog(self):
        if self.last_opened_image is not None:
            self.show_histogram_dialog = ShowHistogramDialog(MainWindow, self.last_opened_image,self)
            self.show_histogram_dialog.exec_()


    def __init__(self):
        self.last_opened_image = None
        self.main_window = None


    def openFile(self):
        self.file = QFileDialog.getOpenFileName(None, "Open Image File", "", "Image Files (*.png *.jpg *.bmp);;All Files (*)")[0]
        self.last_opened_image = cv2.imread(self.file)
        self.showImg(self.last_opened_image)


    def showImg(self, image):
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))


    def imgToGray(self):
        if self.last_opened_image is not None:
            gray = cv2.cvtColor(self.last_opened_image, cv2.COLOR_BGR2GRAY)
            frame = cv2.cvtColor(gray, cv2.COLOR_GRAY2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = gray


    def imgToRotateCW(self):
        if self.last_opened_image is not None:
            rotateCW = cv2.rotate(self.last_opened_image, cv2.ROTATE_90_CLOCKWISE)
            frame = cv2.cvtColor(rotateCW, cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = rotateCW


    def imgToRotateCCW(self):
        if self.last_opened_image is not None:
            rotateCCW = cv2.rotate(self.last_opened_image, cv2.ROTATE_90_COUNTERCLOCKWISE)
            frame = cv2.cvtColor(rotateCCW, cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = rotateCCW


    def imgToFlip(self):
        if self.last_opened_image is not None:
            flip = cv2.flip(self.last_opened_image, 1)
            frame = cv2.cvtColor(flip, cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = flip


    def imgToInvert(self):
        if self.last_opened_image is not None:
            invert = cv2.bitwise_not(self.last_opened_image)
            frame = cv2.cvtColor(invert, cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = invert


    def imgToBlur(self):
        if self.last_opened_image is not None:
            blur = cv2.blur(self.last_opened_image,(10,10))
            frame = cv2.cvtColor(blur,cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = blur

    def imgToBlurmedian(self):
         if self.last_opened_image is not None:
             median = cv2.medianBlur(self.last_opened_image,11)
             frame = cv2.cvtColor(median,cv2.COLOR_BGR2RGB)
             image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
             self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
             self.last_opened_image =  median
    def imgToBlurguassian(self):
        if self.last_opened_image is not None:
            gaussian = cv2.GaussianBlur(self.last_opened_image,(5,5),0)
            frame = cv2.cvtColor(gaussian,cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = gaussian   


    def imgToGaussian(self):
        mean = 0.0
        sigma = 50.0
        if self.last_opened_image is not None:
            gaussian = self.last_opened_image
            image = gaussian.astype(np.float64)
            h,w,c = image.shape
            gauss = np.random.normal(mean,sigma,(h,w,c))
            noise_img = image + gauss
            noise_img = np.clip(noise_img,0,255)
            noise_img = noise_img.astype(np.uint8)
            frame = cv2.cvtColor(noise_img,cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = gaussian


    def imgToSaltAndPepper(self):
        p_salt = 0.05
        p_pepper = 0.05
        if self.last_opened_image is not None:
            salt_and_pepper = self.last_opened_image
            h,w,c = salt_and_pepper.shape
            num_salt = int(p_salt*h*w)
            num_pepper = int(p_pepper*h*w)

            for i in range(num_salt):
                y = random.randint(0,h-1)
                x = random.randint(0,w-1)
                salt_and_pepper[y][x] = [255,255,255]
            for j in range(num_pepper):
                y = random.randint(0,h-1)
                x = random.randint(0,w-1)
                salt_and_pepper[y][x] = [0,0,0]
            frame = cv2.cvtColor(salt_and_pepper,cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = salt_and_pepper


    def imgToBlending(self):
        self.file = QFileDialog.getOpenFileName(None, "Open Image File", "", "Image Files (*.png *.jpg *.bmp);;All Files (*)")[0]
        self.second_image = cv2.imread(self.file)
        if self.second_image is not None:
            blending = cv2.addWeighted(self.last_opened_image,0.5,self.second_image,0.5,0)
            frame = cv2.cvtColor(blending,cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0],QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = blending


    def imgToEnlarge(self):
        scale_up_x = 1.2
        scale_up_y = 1.2
        if self.last_opened_image is not None:
            enlarge = cv2.resize(self.last_opened_image, None, fx= scale_up_x, fy= scale_up_y, interpolation= cv2.INTER_LINEAR)
            frame = cv2.cvtColor(enlarge,cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = enlarge


    def imgToShrink(self):
        scale_down = 0.6
        if self.last_opened_image is not None:
            shrink = cv2.resize(self.last_opened_image, None, fx=scale_down, fy=scale_down, interpolation=cv2.INTER_LINEAR)
            frame = cv2.cvtColor(shrink,cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = shrink


    def imgToSharpen(self):
        sharpen_filter = np.array([[-1,-1,-1],[-1,9,-1],[-1,-1,-1]])
        if self.last_opened_image is not None:
            sharpen = cv2.filter2D(self.last_opened_image,-1,sharpen_filter)
            frame = cv2.cvtColor(sharpen,cv2.COLOR_BGR2RGB)
            image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
            self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
            self.last_opened_image = sharpen
    

    def imgToEdgeDetection(self):
        if self.last_opened_image is not None:
            sobel_x = cv2.Sobel(self.last_opened_image,cv2.CV_64F,1,0,ksize=5)
            sobel_y = cv2.Sobel(self.last_opened_image,cv2.CV_64F,0,1,ksize=5)
            sobel_combined = cv2.addWeighted(sobel_x,0.5,sobel_y,0.5,0)

            canny = cv2.Canny(self.last_opened_image,100,200)
            plt.figure(figsize=(10, 5))

            plt.subplot(131)
            plt.imshow(self.last_opened_image, cmap='gray')
            plt.title('Original Image')
            plt.axis('off')

            plt.subplot(132)
            plt.imshow(sobel_combined, cmap='gray')
            plt.title('Sobel Edge Detection')
            plt.axis('off')

            plt.subplot(133)
            plt.imshow(canny, cmap='gray')
            plt.title('Canny Edge Detection')
            plt.axis('off')
            plt.show()
            

    def saveImg(self):
        if self.last_opened_image is not None:
            filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
            cv2.imwrite(filename, self.last_opened_image)

    def imgToWhite(self):
            if self.last_opened_image is not None:
                # Create a copy of the original image to work with
                img = self.last_opened_image.copy()

                # Define a callback function to update the image when the trackbar value changes
                def on_trackbar_change(dummy):
                    # Get the current trackbar value
                    balance_value = cv2.getTrackbarPos('White Balance', 'White Balance') - 5
                    balance_factor = balance_value / 5

                    # Create a new image with adjusted white balance
                    adjusted_image = img.copy()
                    adjusted_image[:, :, 0] = cv2.addWeighted(img[:, :, 0], 1 + balance_factor, 0, 0, 0)
                    adjusted_image[:, :, 2] = cv2.addWeighted(img[:, :, 2], 1 - balance_factor, 0, 0, 0)

                    # Convert the image to RGB format and display it
                    frame = cv2.cvtColor(adjusted_image, cv2.COLOR_BGR2RGB)
                    image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
                    self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
                    self.last_opened_image = adjusted_image

                # Create a window to display the image
                cv2.namedWindow('White Balance')

                # Create a trackbar for adjusting the white balance
                cv2.createTrackbar('White Balance', 'White Balance', 5, 10, on_trackbar_change)

                # Show the initial image
                on_trackbar_change(0)

                # Wait for the user to press any key and then close the window
                cv2.waitKey(0)
                cv2.destroyAllWindows()



    def imgToAdjust(self):
        if self.last_opened_image is not None:
            # Create a copy of the original image to work with
            img = self.last_opened_image.copy()

            # Define a callback function to update the image when the trackbar values change
            def on_trackbar_change(dummy):
                # Get the current trackbar values
                r = cv2.getTrackbarPos('Red', 'Balanced Image')
                g = cv2.getTrackbarPos('Green', 'Balanced Image')
                b = cv2.getTrackbarPos('Blue', 'Balanced Image')

                # Create a new image with adjusted RGB values
                balanced_image = img.copy()
                balanced_image[:, :, 0] = img[:, :, 0] * (b / 100.0)
                balanced_image[:, :, 1] = img[:, :, 1] * (g / 100.0)
                balanced_image[:, :, 2] = img[:, :, 2] * (r / 100.0)

                # Show the balanced image
                frame = cv2.cvtColor(balanced_image, cv2.COLOR_BGR2RGB)
                image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
                self.showimage.setPixmap(QtGui.QPixmap.fromImage(image))
                self.last_opened_image = balanced_image

            # Create a window to display the image
            cv2.namedWindow('Balanced Image')

            # Create trackbars for each color channel (R, G, B)
            cv2.createTrackbar('Red', 'Balanced Image', 100, 200, on_trackbar_change)
            cv2.createTrackbar('Green', 'Balanced Image', 100, 200, on_trackbar_change)
            cv2.createTrackbar('Blue', 'Balanced Image', 100, 200, on_trackbar_change)

            # Show the initial balanced image
            on_trackbar_change(100)

            # Wait for the user to press any key and then close the window
            cv2.waitKey(0)
            cv2.destroyAllWindows()
    

    def imgToCrop(self):
        if self.last_opened_image is not None:
            img = self.last_opened_image
            image = self.last_opened_image
            roi = cv2.selectROI(image)
            select_region = image[roi[1]:roi[1] + roi[3], roi[0]:roi[0] + roi[2]]

           
            cv2.imshow('crop',select_region)
            

        
    def imgToRectangular(self):
        img = self.last_opened_image
        image = self.last_opened_image
        roi = cv2.selectROI(image)
        select_region = image[roi[1]:roi[1] + roi[3], roi[0]:roi[0] + roi[2]]

        gray = cv2.cvtColor(select_region,cv2.COLOR_RGB2GRAY)
        invert = cv2.bitwise_not(select_region)

        cv2.imshow('Selection',select_region)
        cv2.imshow('RGB to Gray',gray)
        cv2.imshow('RGB to Invert',invert)
        

class BrightnessDialog(QDialog):
    def __init__(self, parent, last_opened_image, ui_main_window):
        super().__init__(parent)
        self.setWindowTitle("Brightness")
        self.setFixedSize(300, 70)
        self.last_opened_image = last_opened_image
        self.ui_main_window = ui_main_window
        layout = QVBoxLayout()
        self.brightnessLabel = QLabel("Brightness")
        layout.addWidget(self.brightnessLabel)
        self.brightnesstSlider = QSlider(self)
        self.brightnesstSlider.setOrientation(QtCore.Qt.Horizontal)
        self.brightnesstSlider.setMinimum(0)
        self.brightnesstSlider.setMaximum(200)  
        self.brightnesstSlider.setValue(100)
        layout.addWidget(self.brightnesstSlider)
        self.setLayout(layout)
        self.brightnesstSlider.valueChanged.connect(self.updateBrightness)


    def updateBrightness(self, value):
       if self.last_opened_image is not None:
            contrast_factor = value / 100.0  
            adjusted_image = self.last_opened_image * contrast_factor
            adjusted_image = np.clip(adjusted_image, 0, 255).astype(np.uint8)
            self.ui_main_window.showImg(adjusted_image)

            
class ContrastDialog(QDialog):
    def __init__(self, parent, last_opened_image, ui_main_window):
        super().__init__(parent)
        self.setWindowTitle("Contrast")
        self.setFixedSize(300, 70)
        self.last_opened_image = last_opened_image
        self.ui_main_window = ui_main_window
        layout = QVBoxLayout()
        self.contrastLabel = QLabel("Contrast")
        layout.addWidget(self.contrastLabel)
        self.contrastSlider = QSlider(self)
        self.contrastSlider.setOrientation(QtCore.Qt.Horizontal)
        self.contrastSlider.setMinimum(0)
        self.contrastSlider.setMaximum(200)  
        self.contrastSlider.setValue(100)
        layout.addWidget(self.contrastSlider)
        self.setLayout(layout)
        self.contrastSlider.valueChanged.connect(self.updateContrast)

    def updateContrast(self, value):
        if self.last_opened_image is not None:
            adjusted_image = self.updateContrastValue(self.last_opened_image, value)
            self.ui_main_window.showImg(adjusted_image)


    def updateContrastValue(self, image, contrast_value):
        contrast_factor = (contrast_value + 100) / 100.0
        adjusted_image = cv2.convertScaleAbs(image, alpha=contrast_factor, beta=0)
        return adjusted_image             


class ShowInfoDialog(QDialog):
    def __init__(self, parent, last_opened_image, ui_main_window):
        super().__init__(parent)
        self.setWindowTitle("Show Information")
        self.setFixedSize(300, 50)
        self.last_opened_image = last_opened_image
        self.ui_main_window = ui_main_window
        layout = QVBoxLayout()
        self.width_and_height = QLabel("Width and Height")
        layout.addWidget(self.width_and_height)
        self.setLayout(layout)
        
        if self.last_opened_image is not None:
            image_height, image_width = self.last_opened_image.shape[:2]
            self.width_and_height.setText(f"Width: {image_width}, Height: {image_height}")


class ShowHistogramDialog(QDialog):
    def __init__(self, parent, last_opened_image, ui_main_window):
        super().__init__(parent)
        self.setWindowTitle("Show  Histogram")
        self.last_opened_image = last_opened_image
        self.ui_main_window = ui_main_window
        layout = QVBoxLayout()
        self.hist_view = pg.PlotWidget()
        layout.addWidget(self.hist_view)
        self.setLayout(layout)

        if self.last_opened_image is not None:
            image = self.last_opened_image
            gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            his, bins = np.histogram(gray.ravel(), 256, [0, 256])
            self.hist_view.clear()
            self.hist_view.setBackground((255, 255, 255))
            self.hist_view.plot(bins, his, stepMode=True, fillLevel=0, brush=(0, 0, 255, 150))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
